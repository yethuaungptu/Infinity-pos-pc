
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  taxRate: 'taxRate',
  currency: 'currency',
  timezone: 'timezone',
  receiptHeader: 'receiptHeader',
  receiptFooter: 'receiptFooter',
  printLogo: 'printLogo',
  logoData: 'logoData',
  creditTermsDefault: 'creditTermsDefault',
  maxCreditLimit: 'maxCreditLimit',
  interestRate: 'interestRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  position: 'position',
  department: 'department',
  hireDate: 'hireDate',
  salary: 'salary',
  active: 'active',
  username: 'username',
  password: 'password',
  lastLogin: 'lastLogin',
  permissions: 'permissions',
  totalCollections: 'totalCollections',
  averageQuality: 'averageQuality',
  onTimeRate: 'onTimeRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  type: 'type',
  businessName: 'businessName',
  contactPerson: 'contactPerson',
  email: 'email',
  phone: 'phone',
  address: 'address',
  creditLimit: 'creditLimit',
  creditBalance: 'creditBalance',
  paymentTerms: 'paymentTerms',
  creditStatus: 'creditStatus',
  farmSize: 'farmSize',
  animalTypes: 'animalTypes',
  henEggsDailyProduction: 'henEggsDailyProduction',
  duckEggsDailyProduction: 'duckEggsDailyProduction',
  collectionSchedule: 'collectionSchedule',
  isRetail: 'isRetail',
  loyaltyPoints: 'loyaltyPoints',
  totalPurchases: 'totalPurchases',
  totalEggSales: 'totalEggSales',
  lastPurchase: 'lastPurchase',
  lastEggCollection: 'lastEggCollection',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  contactPerson: 'contactPerson',
  email: 'email',
  phone: 'phone',
  street: 'street',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  creditLimit: 'creditLimit',
  creditBalance: 'creditBalance',
  paymentTerms: 'paymentTerms',
  earlyPaymentDiscount: 'earlyPaymentDiscount',
  productTypes: 'productTypes',
  totalPurchases: 'totalPurchases',
  onTimePaymentRate: 'onTimePaymentRate',
  lastOrder: 'lastOrder',
  lastPayment: 'lastPayment',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  description: 'description',
  type: 'type',
  category: 'category',
  costPrice: 'costPrice',
  sellingPrice: 'sellingPrice',
  wholesalePrice: 'wholesalePrice',
  stock: 'stock',
  unit: 'unit',
  minimumStock: 'minimumStock',
  expiryDate: 'expiryDate',
  batchNumber: 'batchNumber',
  manufacturer: 'manufacturer',
  requiresPrescription: 'requiresPrescription',
  activeIngredient: 'activeIngredient',
  dosage: 'dosage',
  animalType: 'animalType',
  nutritionInfo: 'nutritionInfo',
  feedType: 'feedType',
  primaryVendorId: 'primaryVendorId',
  alternateVendors: 'alternateVendors',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  receiptNumber: 'receiptNumber',
  type: 'type',
  customerId: 'customerId',
  vendorId: 'vendorId',
  subtotal: 'subtotal',
  tax: 'tax',
  discount: 'discount',
  total: 'total',
  paymentMethod: 'paymentMethod',
  paidAmount: 'paidAmount',
  balanceAmount: 'balanceAmount',
  status: 'status',
  timestamp: 'timestamp',
  dueDate: 'dueDate',
  staffId: 'staffId',
  notes: 'notes',
  synced: 'synced',
  cloudId: 'cloudId',
  syncError: 'syncError',
  lastSync: 'lastSync',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionItemScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  total: 'total',
  productName: 'productName',
  productSku: 'productSku',
  unit: 'unit',
  batchNumber: 'batchNumber',
  expiryDate: 'expiryDate',
  grade: 'grade'
};

exports.Prisma.EggCollectionScalarFieldEnum = {
  id: 'id',
  farmerId: 'farmerId',
  routeId: 'routeId',
  staffId: 'staffId',
  collectionDate: 'collectionDate',
  henEggsSmall: 'henEggsSmall',
  henEggsMedium: 'henEggsMedium',
  henEggsLarge: 'henEggsLarge',
  henEggsExtraLarge: 'henEggsExtraLarge',
  henEggsDamaged: 'henEggsDamaged',
  totalHenEggs: 'totalHenEggs',
  duckEggsSmall: 'duckEggsSmall',
  duckEggsMedium: 'duckEggsMedium',
  duckEggsLarge: 'duckEggsLarge',
  duckEggsDamaged: 'duckEggsDamaged',
  totalDuckEggs: 'totalDuckEggs',
  henEggPrice: 'henEggPrice',
  duckEggPrice: 'duckEggPrice',
  totalValue: 'totalValue',
  qualityScore: 'qualityScore',
  qualityNotes: 'qualityNotes',
  paid: 'paid',
  paymentDate: 'paymentDate',
  synced: 'synced',
  cloudId: 'cloudId',
  syncError: 'syncError',
  lastSync: 'lastSync',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CollectionRouteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  estimatedTime: 'estimatedTime',
  estimatedDistance: 'estimatedDistance',
  schedule: 'schedule',
  staffId: 'staffId',
  averageTime: 'averageTime',
  onTimePercentage: 'onTimePercentage',
  totalCollections: 'totalCollections',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  vendorId: 'vendorId',
  orderDate: 'orderDate',
  expectedDate: 'expectedDate',
  receivedDate: 'receivedDate',
  subtotal: 'subtotal',
  tax: 'tax',
  shipping: 'shipping',
  total: 'total',
  status: 'status',
  orderedBy: 'orderedBy',
  receivedBy: 'receivedBy',
  notes: 'notes',
  synced: 'synced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseOrderItemScalarFieldEnum = {
  id: 'id',
  purchaseOrderId: 'purchaseOrderId',
  productId: 'productId',
  quantityOrdered: 'quantityOrdered',
  quantityReceived: 'quantityReceived',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  productName: 'productName',
  productSku: 'productSku'
};

exports.Prisma.PaymentRecordScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  customerId: 'customerId',
  vendorId: 'vendorId',
  transactionId: 'transactionId',
  paymentMethod: 'paymentMethod',
  paymentDate: 'paymentDate',
  dueDate: 'dueDate',
  referenceNumber: 'referenceNumber',
  checkNumber: 'checkNumber',
  processedBy: 'processedBy',
  notes: 'notes',
  synced: 'synced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  description: 'description',
  category: 'category',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  recordId: 'recordId',
  action: 'action',
  oldValues: 'oldValues',
  newValues: 'newValues',
  userId: 'userId',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  timestamp: 'timestamp'
};

exports.Prisma.SyncLogScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  recordId: 'recordId',
  operation: 'operation',
  syncedAt: 'syncedAt',
  success: 'success',
  error: 'error',
  attempts: 'attempts',
  conflictResolution: 'conflictResolution'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  category: 'category',
  priority: 'priority',
  title: 'title',
  message: 'message',
  recipientIds: 'recipientIds',
  globalNotification: 'globalNotification',
  read: 'read',
  readAt: 'readAt',
  readBy: 'readBy',
  expiresAt: 'expiresAt',
  actionRequired: 'actionRequired',
  actionUrl: 'actionUrl',
  actionData: 'actionData',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.StaffPosition = exports.$Enums.StaffPosition = {
  MANAGER: 'MANAGER',
  CASHIER: 'CASHIER',
  COLLECTOR: 'COLLECTOR',
  ADMIN: 'ADMIN',
  SUPERVISOR: 'SUPERVISOR'
};

exports.StaffDepartment = exports.$Enums.StaffDepartment = {
  SALES: 'SALES',
  COLLECTION: 'COLLECTION',
  INVENTORY: 'INVENTORY',
  ADMIN: 'ADMIN',
  MANAGEMENT: 'MANAGEMENT'
};

exports.CustomerType = exports.$Enums.CustomerType = {
  FARMER: 'FARMER',
  REGULAR: 'REGULAR',
  WHOLESALE: 'WHOLESALE'
};

exports.CreditStatus = exports.$Enums.CreditStatus = {
  CURRENT: 'CURRENT',
  OVERDUE_30: 'OVERDUE_30',
  OVERDUE_60: 'OVERDUE_60',
  OVERDUE_90: 'OVERDUE_90',
  BAD_DEBT: 'BAD_DEBT'
};

exports.CollectionSchedule = exports.$Enums.CollectionSchedule = {
  DAILY: 'DAILY',
  ALTERNATE: 'ALTERNATE',
  WEEKLY: 'WEEKLY',
  CUSTOM: 'CUSTOM'
};

exports.ProductType = exports.$Enums.ProductType = {
  FEED: 'FEED',
  MEDICINE: 'MEDICINE',
  EQUIPMENT: 'EQUIPMENT',
  EGGS: 'EGGS',
  SUPPLIES: 'SUPPLIES',
  OTHER: 'OTHER'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  SALE: 'SALE',
  PURCHASE: 'PURCHASE',
  EGG_COLLECTION: 'EGG_COLLECTION',
  EGG_SALE: 'EGG_SALE',
  REFUND: 'REFUND',
  ADJUSTMENT: 'ADJUSTMENT'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CREDIT: 'CREDIT',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  DIGITAL: 'DIGITAL'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  PARTIAL_REFUND: 'PARTIAL_REFUND'
};

exports.PurchaseOrderStatus = exports.$Enums.PurchaseOrderStatus = {
  PENDING: 'PENDING',
  ORDERED: 'ORDERED',
  PARTIAL_RECEIVED: 'PARTIAL_RECEIVED',
  RECEIVED: 'RECEIVED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  CUSTOMER_PAYMENT: 'CUSTOMER_PAYMENT',
  VENDOR_PAYMENT: 'VENDOR_PAYMENT',
  EGG_PAYMENT: 'EGG_PAYMENT',
  REFUND: 'REFUND',
  ADJUSTMENT: 'ADJUSTMENT',
  DEBIT: 'DEBIT'
};

exports.SettingType = exports.$Enums.SettingType = {
  STRING: 'STRING',
  NUMBER: 'NUMBER',
  BOOLEAN: 'BOOLEAN',
  JSON: 'JSON'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  SYNC: 'SYNC'
};

exports.SyncOperation = exports.$Enums.SyncOperation = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  BULK_SYNC: 'BULK_SYNC'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  ALERT: 'ALERT'
};

exports.NotificationCategory = exports.$Enums.NotificationCategory = {
  INVENTORY: 'INVENTORY',
  SALES: 'SALES',
  CUSTOMER: 'CUSTOMER',
  VENDOR: 'VENDOR',
  SYSTEM: 'SYSTEM',
  QUALITY: 'QUALITY',
  FINANCIAL: 'FINANCIAL'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.Prisma.ModelName = {
  Store: 'Store',
  Staff: 'Staff',
  Customer: 'Customer',
  Vendor: 'Vendor',
  Product: 'Product',
  Transaction: 'Transaction',
  TransactionItem: 'TransactionItem',
  EggCollection: 'EggCollection',
  CollectionRoute: 'CollectionRoute',
  PurchaseOrder: 'PurchaseOrder',
  PurchaseOrderItem: 'PurchaseOrderItem',
  PaymentRecord: 'PaymentRecord',
  SystemSetting: 'SystemSetting',
  AuditLog: 'AuditLog',
  SyncLog: 'SyncLog',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
